import React, { useState, useEffect } from "react";
import {
  Card,
  Table,
  Button,
  Space,
  Tag,
  Avatar,
  Modal,
  Descriptions,
  Row,
  Col,
  Input,
  Select,
  Typography,
  Spin,
  message,
} from "antd";
import { UserOutlined } from "@ant-design/icons";
import dayjs from "dayjs";
import { treatmentService } from "../../service/treatment.service";
import { authService } from "../../service/auth.service";
import { useNavigate } from "react-router-dom";

const { Search } = Input;
const { Option } = Select;
const { Title, Text } = Typography;

const PatientList = () => {
  const [loading, setLoading] = useState(true);
  const [patients, setPatients] = useState([]);
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [doctorId, setDoctorId] = useState("");
  const [doctorName, setDoctorName] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchDoctorInfo = async () => {
      try {
        const res = await authService.getMyInfo();
        const id = res?.data?.result?.id;
        const name = res?.data?.result?.fullName;
        if (id) {
          setDoctorId(id);
          setDoctorName(name);
        } else {
          message.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√°c sƒ©");
        }
      } catch (error) {
        console.error("Error fetching doctor info:", error);
        message.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√°c sƒ©");
      }
    };
    fetchDoctorInfo();
  }, []);

  useEffect(() => {
    if (!doctorId) return;
    const fetchData = async () => {
      try {
        setLoading(true);
        const today = dayjs().format("YYYY-MM-DD");
        // G·ªçi song song 2 API
        const [appointmentsRes, treatmentRecordsRes] = await Promise.all([
          treatmentService.getDoctorAppointmentsByDate(doctorId, today),
          treatmentService.getTreatmentRecordsByDoctor(doctorId),
        ]);
        const appointments = appointmentsRes?.data?.result || [];
        const treatmentRecords = Array.isArray(treatmentRecordsRes)
          ? treatmentRecordsRes
          : [];
        // L·ªçc: ch·ªâ gi·ªØ l·ªãch h·∫πn m√† b·ªánh nh√¢n c√≥ treatment record h·ª£p l·ªá
        const filtered = appointments.filter((appt) => {
          return treatmentRecords.some(
            (record) =>
              (record.customerId === appt.customerId ||
                record.customerName === appt.customerName) &&
              record.status !== "PENDING" &&
              record.status !== "CANCELLED"
          );
        });
        setPatients(filtered);
      } catch (error) {
        console.error("Error fetching data:", error);
        message.error("C√≥ l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu b·ªánh nh√¢n");
        setPatients([]);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [doctorId]);

  // Filter data
  const filteredData = patients.filter((patient) => {
    const matchesSearch =
      patient.customerName.toLowerCase().includes(searchText.toLowerCase()) ||
      patient.id.toString().includes(searchText);
    const matchesStatus =
      statusFilter === "all" || patient.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusTag = (status) => {
    const statusMap = {
      CONFIRMED: { color: "blue", text: "ƒê√£ x√°c nh·∫≠n" },
      PENDING: { color: "orange", text: "Ch·ªù x√°c nh·∫≠n" },
      REJECTED_CHANGE: { color: "red", text: "T·ª´ ch·ªëi thay ƒë·ªïi" },
      CANCELLED: { color: "red", text: "ƒê√£ h·ªßy" },
      COMPLETED: { color: "green", text: "ƒê√£ ho√†n th√†nh" },
      INPROGRESS: { color: "blue", text: "ƒêang th·ª±c hi·ªán" },
    };
    return (
      <Tag color={statusMap[status]?.color}>
        {statusMap[status]?.text || status}
      </Tag>
    );
  };

  const handleDetail = (record) => {
    treatmentService.getTreatmentRecordsByDoctor(doctorId).then((records) => {
      // T√¨m treatment record ph√π h·ª£p nh·∫•t
      let treatmentRecord = null;
      
      if (Array.isArray(records)) {
        // ∆Øu ti√™n t√¨m theo purpose/service tr∆∞·ªõc
        treatmentRecord = records.find(
          (r) =>
            (r.customerId === record.customerId ||
              r.customerName === record.customerName) &&
            r.status !== "PENDING" &&
            r.status !== "CANCELLED" &&
            // T√¨m theo purpose ho·∫∑c service name
            (r.purpose === record.purpose ||
             r.serviceName === record.serviceName ||
             r.treatmentServiceName === record.purpose ||
             r.treatmentServiceName === record.serviceName)
        );
        
        // N·∫øu kh√¥ng t√¨m th·∫•y theo purpose/service, t√¨m theo customer
        if (!treatmentRecord) {
          treatmentRecord = records.find(
            (r) =>
              (r.customerId === record.customerId ||
                r.customerName === record.customerName) &&
              r.status !== "PENDING" &&
              r.status !== "CANCELLED"
          );
        }
      }
      
      console.log('üîç Treatment record t√¨m ƒë∆∞·ª£c:', treatmentRecord);
      
      if (treatmentRecord) {
        // G·ªçi API l·∫•y chi ti·∫øt treatment record (bao g·ªìm c√°c b∆∞·ªõc)
        treatmentService.getTreatmentRecordById(treatmentRecord.id).then((detailRes) => {
          const detail = detailRes?.data?.result;
          console.log('üìã Treatment record chi ti·∫øt:', detail);
          if (detail) {
            navigate("/doctor-dashboard/treatment-stages", {
              state: {
                patientInfo: {
                  customerId: detail.customerId,
                  customerName: detail.customerName,
                },
                treatmentData: detail, // truy·ªÅn treatment record chi ti·∫øt (c√≥ steps)
                sourcePage: "patients",
                appointmentData: record
              },
            });
          } else {
            message.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt h·ªì s∆° ƒëi·ªÅu tr·ªã!");
          }
        }).catch((error) => {
          console.error("Error fetching treatment record detail:", error);
          message.error("C√≥ l·ªói x·∫£y ra khi l·∫•y chi ti·∫øt h·ªì s∆° ƒëi·ªÅu tr·ªã!");
        });
      } else {
        message.error(
          "Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒëi·ªÅu tr·ªã h·ª£p l·ªá cho b·ªánh nh√¢n n√†y!"
        );
      }
    }).catch((error) => {
      console.error("Error fetching treatment records:", error);
      message.error("C√≥ l·ªói x·∫£y ra khi t√¨m h·ªì s∆° ƒëi·ªÅu tr·ªã!");
    });
  };

  const columns = [
    {
      title: "B·ªánh nh√¢n",
      dataIndex: "customerName",
      key: "customerName",
      render: (name, record) => (
        <div style={{ display: "flex", alignItems: "center" }}>
          <Avatar
            size={40}
            icon={<UserOutlined />}
            style={{ marginRight: 12, backgroundColor: "#1890ff" }}
          />
          <div>
            <Text strong>{name}</Text>
            <br />
            <Text type="secondary" style={{ fontSize: "12px" }}>
              {record.customerEmail}
            </Text>
          </div>
        </div>
      ),
    },
    {
      title: "Ng√†y kh√°m",
      dataIndex: "appointmentDate",
      key: "appointmentDate",
      render: (date) => dayjs(date).format("DD/MM/YYYY"),
    },
    {
      title: "Ca kh√°m",
      dataIndex: "shift",
      key: "shift",
      render: (shift) => (
        <Tag color="cyan">
          {shift === "MORNING"
            ? "S√°ng"
            : shift === "AFTERNOON"
            ? "Chi·ªÅu"
            : shift}
        </Tag>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      key: "status",
      render: (record) => getStatusTag(record.status),
    },
    {
      title: "D·ªãch v·ª•",
      key: "serviceName",
      render: (record) => (
        <Tag color="purple">
          {record.purpose || record.serviceName || "Ch∆∞a c√≥"}
        </Tag>
      ),
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space size="middle">
          <Button
            type="primary"
            size="small"
            onClick={() => handleDetail(record)}
          >
            Chi Ti·∫øt
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div>
      {/* Filters */}
      <Card
        className="mb-6"
        style={{
          boxShadow: "0 2px 8px rgba(0,0,0,0.08)",
          borderRadius: 12,
          border: "none",
        }}
      >
        <Row gutter={16} align="middle">
          <Col span={8}>
            <Search
              placeholder="T√¨m ki·∫øm t√™n ho·∫∑c ID b·ªánh nh√¢n..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              style={{ width: "100%", borderRadius: 8 }}
              allowClear
            />
          </Col>
          <Col span={6}>
            <Select
              value={statusFilter}
              onChange={setStatusFilter}
              style={{ width: "100%", borderRadius: 8 }}
            >
              <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
              <Option value="CONFIRMED">ƒê√£ x√°c nh·∫≠n</Option>
              <Option value="PENDING">Ch·ªù x√°c nh·∫≠n</Option>
              <Option value="REJECTED_CHANGE">T·ª´ ch·ªëi thay ƒë·ªïi</Option>
              <Option value="CANCELLED">ƒê√£ h·ªßy</Option>
            </Select>
          </Col>
          <Col span={10} style={{ textAlign: "right" }}>
            <Text type="secondary">T·ªïng: {filteredData.length} b·ªánh nh√¢n</Text>
          </Col>
        </Row>
      </Card>

      {/* Patient Table */}
      <Card
        title={
          <span style={{ fontWeight: 600, fontSize: 20, color: "#1890ff" }}>
            Danh S√°ch B·ªánh Nh√¢n H√¥m Nay
          </span>
        }
        style={{
          boxShadow: "0 4px 16px rgba(24,144,255,0.08)",
          borderRadius: 16,
          border: "none",
          marginBottom: 24,
        }}
      >
        <Spin spinning={loading}>
          {filteredData.length === 0 ? (
            <div
              style={{
                padding: 32,
                textAlign: "center",
                color: "#888",
                fontSize: 16,
              }}
            >
              <p>Kh√¥ng c√≥ b·ªánh nh√¢n n√†o c·∫ßn ƒëi·ªÅu tr·ªã h√¥m nay.</p>
            </div>
          ) : (
            <Table
              columns={columns}
              dataSource={filteredData}
              rowKey="id"
              pagination={{ pageSize: 10 }}
              scroll={{ x: 1000 }}
              bordered
              style={{ borderRadius: 12, overflow: "hidden" }}
            />
          )}
        </Spin>
      </Card>

      {/* Patient Detail Modal */}
      <Modal
        title="H·ªì S∆° B·ªánh Nh√¢n"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setModalVisible(false)}>
            ƒê√≥ng
          </Button>,
        ]}
        width={800}
      >
        {selectedPatient && (
          <Descriptions column={2} bordered>
            <Descriptions.Item label="H·ªç t√™n">
              {selectedPatient.customerName}
            </Descriptions.Item>
            <Descriptions.Item label="Email">
              {selectedPatient.customerEmail}
            </Descriptions.Item>
            <Descriptions.Item label="B√°c sƒ©">
              {selectedPatient.doctorName}
            </Descriptions.Item>
            <Descriptions.Item label="D·ªãch v·ª•">
              {selectedPatient.serviceName || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i">
              {getStatusTag(selectedPatient.status)}
            </Descriptions.Item>
            <Descriptions.Item label="Ng√†y kh√°m">
              {dayjs(selectedPatient.appointmentDate).format("DD/MM/YYYY")}
            </Descriptions.Item>
            <Descriptions.Item label="Ca kh√°m">
              {selectedPatient.shift}
            </Descriptions.Item>
            <Descriptions.Item label="M·ª•c ƒë√≠ch">
              {selectedPatient.purpose || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Ghi ch√∫">
              {selectedPatient.notes || "Ch∆∞a c√≥"}
            </Descriptions.Item>
          </Descriptions>
        )}
      </Modal>
    </div>
  );
};

export default PatientList;
