import React, { useState, useEffect } from "react";
import {
  Card,
  Table,
  Button,
  Space,
  Tag,
  Avatar,
  Modal,
  Descriptions,
  Row,
  Col,
  Input,
  Select,
  Typography,
  Spin,
  message,
} from "antd";
import { UserOutlined } from "@ant-design/icons";
import dayjs from "dayjs";
import { treatmentService } from "../../service/treatment.service";
import { authService } from "../../service/auth.service";
import { useNavigate } from "react-router-dom";

const { Search } = Input;
const { Option } = Select;
const { Title, Text } = Typography;

const PatientList = () => {
  const [loading, setLoading] = useState(true);
  const [patients, setPatients] = useState([]);
  const [selectedPatient, setSelectedPatient] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [doctorId, setDoctorId] = useState("");
  const [doctorName, setDoctorName] = useState("");
  const navigate = useNavigate();

  useEffect(() => {
    const fetchDoctorInfo = async () => {
      try {
        const res = await authService.getMyInfo();
        const id = res?.data?.result?.id;
        const name = res?.data?.result?.fullName;
        if (id) {
          setDoctorId(id);
          setDoctorName(name);
        } else {
          message.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√°c sƒ©");
        }
      } catch (error) {
        console.error("Error fetching doctor info:", error);
        message.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b√°c sƒ©");
      }
    };
    fetchDoctorInfo();
  }, []);

  useEffect(() => {
    if (!doctorId) return;
    const fetchData = async () => {
      try {
        setLoading(true);
        const today = dayjs().format("YYYY-MM-DD");
        // G·ªçi song song 2 API
        const [appointmentsRes, treatmentRecordsRes] = await Promise.all([
          treatmentService.getDoctorAppointmentsByDate(doctorId, today),
          treatmentService.getTreatmentRecordsByDoctor(doctorId),
        ]);
        
        // ƒê·∫£m b·∫£o appointments l√† array
        let appointments = [];
        if (appointmentsRes?.data?.result) {
          if (Array.isArray(appointmentsRes.data.result)) {
            appointments = appointmentsRes.data.result;
          } else if (appointmentsRes.data.result.content && Array.isArray(appointmentsRes.data.result.content)) {
            appointments = appointmentsRes.data.result.content;
          } else {
            console.warn('Appointments data format kh√¥ng ƒë√∫ng:', appointmentsRes.data.result);
            appointments = [];
          }
        }
        
        // ƒê·∫£m b·∫£o treatmentRecords l√† array
        let treatmentRecords = [];
        if (Array.isArray(treatmentRecordsRes)) {
          treatmentRecords = treatmentRecordsRes;
        } else if (treatmentRecordsRes?.data?.result) {
          if (Array.isArray(treatmentRecordsRes.data.result)) {
            treatmentRecords = treatmentRecordsRes.data.result;
          } else if (treatmentRecordsRes.data.result.content && Array.isArray(treatmentRecordsRes.data.result.content)) {
            treatmentRecords = treatmentRecordsRes.data.result.content;
          }
        }
        
        console.log('üìÖ Appointments:', appointments);
        console.log('üìã Treatment Records:', treatmentRecords);
        
        // L·ªçc: ch·ªâ gi·ªØ l·ªãch h·∫πn m√† b·ªánh nh√¢n c√≥ treatment record h·ª£p l·ªá
        const filtered = appointments.filter((appt) => {
          return treatmentRecords.some(
            (record) =>
              (record.customerId === appt.customerId ||
                record.customerName === appt.customerName) &&
              record.status !== "PENDING" &&
              record.status !== "CANCELLED"
          );
        });
        
        console.log('‚úÖ Filtered patients:', filtered);
        setPatients(filtered);
      } catch (error) {
        console.error("Error fetching data:", error);
        message.error("C√≥ l·ªói x·∫£y ra khi l·∫•y d·ªØ li·ªáu b·ªánh nh√¢n");
        setPatients([]);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [doctorId]);

  // Filter data
  const filteredData = patients.filter((patient) => {
    const matchesSearch =
      patient.customerName.toLowerCase().includes(searchText.toLowerCase()) ||
      patient.id.toString().includes(searchText);
    const matchesStatus =
      statusFilter === "all" || patient.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusTag = (status) => {
    const statusMap = {
      CONFIRMED: { color: "blue", text: "ƒê√£ x√°c nh·∫≠n" },
      PENDING: { color: "orange", text: "Ch·ªù x√°c nh·∫≠n" },
      REJECTED_CHANGE: { color: "red", text: "T·ª´ ch·ªëi thay ƒë·ªïi" },
      CANCELLED: { color: "red", text: "ƒê√£ h·ªßy" },
      COMPLETED: { color: "green", text: "ƒê√£ ho√†n th√†nh" },
      INPROGRESS: { color: "blue", text: "ƒêang th·ª±c hi·ªán" },
    };
    return (
      <Tag color={statusMap[status]?.color}>
        {statusMap[status]?.text || status}
      </Tag>
    );
  };

  const handleDetail = async (record) => {
    try {
      console.log('üîç B·∫Øt ƒë·∫ßu t√¨m treatment record cho appointment:', record);
      
      // L·∫•y t·∫•t c·∫£ treatment records c·ªßa b√°c sƒ©
      const treatmentRecordsResponse = await treatmentService.getAllTreatmentRecordsByDoctor(doctorId);
      const treatmentRecords = treatmentRecordsResponse?.data?.result?.content || treatmentRecordsResponse?.data?.result || [];
      
      console.log('üîç T·∫•t c·∫£ treatment records:', treatmentRecords);
      console.log('üìÖ Appointment c·∫ßn t√¨m:', record);
      
      // L·ªçc treatment records theo customer tr∆∞·ªõc
      const customerTreatmentRecords = treatmentRecords.filter(
        (r) =>
          (record.customerId && r.customerId === record.customerId) ||
          (record.customerName && r.customerName === record.customerName)
      );
      
      console.log('üîç Treatment records c·ªßa customer:', customerTreatmentRecords);
      
      // T√¨m treatment record c√≥ step kh·ªõp v·ªõi appointment
      let matchedTreatmentRecord = null;
      
      for (const treatmentRecord of customerTreatmentRecords) {
        // Ki·ªÉm tra t·ª´ng step trong treatment record
        if (treatmentRecord.treatmentSteps && Array.isArray(treatmentRecord.treatmentSteps)) {
          const matchingStep = treatmentRecord.treatmentSteps.find(step => {
            // Kh·ªõp theo ng√†y
            const dateMatch = step.scheduledDate === record.appointmentDate;
            
            // N·∫øu appointment c√≥ purpose/service name th√¨ match theo name
            const hasPurpose = record.purpose || record.serviceName || record.treatmentServiceName;
            let nameMatch = false;
            
            if (hasPurpose) {
              nameMatch = step.name === record.purpose || 
                         step.name === record.serviceName ||
                         step.name === record.treatmentServiceName;
            } else {
              // N·∫øu kh√¥ng c√≥ purpose, ch·ªâ match theo date
              nameMatch = true;
            }
            
            console.log(`üîç Ki·ªÉm tra step: ${step.name} (${step.scheduledDate}) vs appointment: ${record.purpose} (${record.appointmentDate})`);
            console.log(`üìÖ Date match: ${dateMatch}, Name match: ${nameMatch}, Has purpose: ${hasPurpose}`);
            
            return dateMatch && nameMatch;
          });
          
          if (matchingStep) {
            matchedTreatmentRecord = treatmentRecord;
            console.log('‚úÖ T√¨m th·∫•y treatment record kh·ªõp:', matchedTreatmentRecord);
            console.log('‚úÖ Step kh·ªõp:', matchingStep);
            break;
          }
        } else {
          // N·∫øu treatment record kh√¥ng c√≥ steps, g·ªçi API l·∫•y chi ti·∫øt
          console.log(`‚ö†Ô∏è Treatment record ${treatmentRecord.id} kh√¥ng c√≥ treatmentSteps, g·ªçi API l·∫•y chi ti·∫øt...`);
          try {
            const detailRes = await treatmentService.getTreatmentRecordById(treatmentRecord.id);
            const detailedRecord = detailRes?.data?.result;
            
            if (detailedRecord && detailedRecord.treatmentSteps && Array.isArray(detailedRecord.treatmentSteps)) {
              console.log(`üìã Treatment record ${treatmentRecord.id} c√≥ ${detailedRecord.treatmentSteps.length} steps sau khi g·ªçi API`);
              
              const matchingStep = detailedRecord.treatmentSteps.find(step => {
                // Kh·ªõp theo ng√†y
                const dateMatch = step.scheduledDate === record.appointmentDate;
                
                // N·∫øu appointment c√≥ purpose/service name th√¨ match theo name
                const hasPurpose = record.purpose || record.serviceName || record.treatmentServiceName;
                let nameMatch = false;
                
                if (hasPurpose) {
                  nameMatch = step.name === record.purpose || 
                             step.name === record.serviceName ||
                             step.name === record.treatmentServiceName;
                } else {
                  // N·∫øu kh√¥ng c√≥ purpose, ch·ªâ match theo date
                  nameMatch = true;
                }
                
                console.log(`üîç Ki·ªÉm tra step: ${step.name} (${step.scheduledDate}) vs appointment: ${record.purpose} (${record.appointmentDate})`);
                console.log(`üìÖ Date match: ${dateMatch}, Name match: ${nameMatch}, Has purpose: ${hasPurpose}`);
                
                return dateMatch && nameMatch;
              });
              
              if (matchingStep) {
                matchedTreatmentRecord = detailedRecord;
                console.log('‚úÖ T√¨m th·∫•y treatment record kh·ªõp:', matchedTreatmentRecord);
                console.log('‚úÖ Step kh·ªõp:', matchingStep);
                break;
              }
            }
          } catch (error) {
            console.error(`‚ùå L·ªói khi g·ªçi API l·∫•y chi ti·∫øt treatment record ${treatmentRecord.id}:`, error);
          }
        }
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y theo step, t√¨m theo customer v√† service (fallback)
      if (!matchedTreatmentRecord) {
        console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y theo step, t√¨m theo customer v√† service...');
        
        if (customerTreatmentRecords.length > 0) {
          // N·∫øu c√≥ nhi·ªÅu records, c·∫ßn logic ph√¢n bi·ªát
          if (customerTreatmentRecords.length === 1) {
            // Ch·ªâ c√≥ 1 record ‚Üí d√πng lu√¥n
            matchedTreatmentRecord = customerTreatmentRecords[0];
            console.log('‚úÖ Ch·ªâ c√≥ 1 treatment record cho customer, d√πng lu√¥n:', matchedTreatmentRecord);
          } else {
            // C√≥ nhi·ªÅu records ‚Üí c·∫ßn logic ph√¢n bi·ªát
            console.log('‚ö†Ô∏è C√≥ nhi·ªÅu treatment records cho customer, c·∫ßn logic ph√¢n bi·ªát...');
            
            // Th·ª≠ t√¨m theo service name n·∫øu c√≥
            if (record.purpose || record.serviceName || record.treatmentServiceName) {
              const serviceMatch = customerTreatmentRecords.find(r =>
                r.purpose === record.purpose ||
                r.serviceName === record.serviceName ||
                r.treatmentServiceName === record.purpose ||
                r.treatmentServiceName === record.serviceName
              );
              
              if (serviceMatch) {
                matchedTreatmentRecord = serviceMatch;
                console.log('‚úÖ T√¨m th·∫•y theo service match:', matchedTreatmentRecord);
              }
            }
            
            // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, th·ª≠ logic ph√¢n bi·ªát th√¥ng minh
            if (!matchedTreatmentRecord) {
              console.log('üîç Th·ª≠ logic ph√¢n bi·ªát th√¥ng minh...');
              
              // 1. Th·ª≠ t√¨m theo ng√†y g·∫ßn nh·∫•t v·ªõi appointment date
              const appointmentDate = new Date(record.appointmentDate);
              const sortedByDate = customerTreatmentRecords.sort((a, b) => {
                const dateA = new Date(a.startDate || a.createdDate);
                const dateB = new Date(b.startDate || b.createdDate);
                const diffA = Math.abs(dateA - appointmentDate);
                const diffB = Math.abs(dateB - appointmentDate);
                return diffA - diffB;
              });
              
              console.log('üìÖ S·∫Øp x·∫øp theo ng√†y g·∫ßn nh·∫•t:', sortedByDate.map(r => ({ id: r.id, startDate: r.startDate, createdDate: r.createdDate })));
              
              // 2. Th·ª≠ t√¨m theo status (∆∞u ti√™n INPROGRESS > CONFIRMED > COMPLETED)
              const statusPriority = ['INPROGRESS', 'CONFIRMED', 'COMPLETED', 'PLANNED'];
              let statusMatch = null;
              
              for (const status of statusPriority) {
                statusMatch = customerTreatmentRecords.find(r => r.status === status);
                if (statusMatch) {
                  console.log(`‚úÖ T√¨m th·∫•y theo status ${status}:`, statusMatch);
                  break;
                }
              }
              
              // 3. Quy·∫øt ƒë·ªãnh cu·ªëi c√πng
              if (statusMatch) {
                matchedTreatmentRecord = statusMatch;
                console.log('‚úÖ Ch·ªçn theo status priority:', matchedTreatmentRecord);
              } else if (sortedByDate.length > 0) {
                matchedTreatmentRecord = sortedByDate[0];
                console.log('‚úÖ Ch·ªçn theo ng√†y g·∫ßn nh·∫•t:', matchedTreatmentRecord);
              } else {
                // Cu·ªëi c√πng m·ªõi b√°o l·ªói
                message.error(
                  `B·ªánh nh√¢n ${record.customerName} c√≥ ${customerTreatmentRecords.length} h·ªì s∆° ƒëi·ªÅu tr·ªã. Kh√¥ng th·ªÉ x√°c ƒë·ªãnh h·ªì s∆° n√†o t∆∞∆°ng ·ª©ng v·ªõi l·ªãch h·∫πn n√†y!`
                );
                return;
              }
            }
          }
        }
      }
      
      console.log('üéØ Treatment record cu·ªëi c√πng:', matchedTreatmentRecord);
      
      if (matchedTreatmentRecord) {
        // G·ªçi API l·∫•y chi ti·∫øt treatment record (bao g·ªìm c√°c b∆∞·ªõc)
        const detailRes = await treatmentService.getTreatmentRecordById(matchedTreatmentRecord.id);
        const detail = detailRes?.data?.result;
        
        console.log('üìã Treatment record chi ti·∫øt:', detail);
        
        if (detail) {
          navigate("/doctor-dashboard/treatment-stages", {
            state: {
              patientInfo: {
                customerId: detail.customerId,
                customerName: detail.customerName,
              },
              treatmentData: detail, // truy·ªÅn treatment record chi ti·∫øt (c√≥ steps)
              sourcePage: "patients",
              appointmentData: record
            },
          });
        } else {
          message.error("Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt h·ªì s∆° ƒëi·ªÅu tr·ªã!");
        }
      } else {
        message.error(
          "Kh√¥ng t√¨m th·∫•y h·ªì s∆° ƒëi·ªÅu tr·ªã h·ª£p l·ªá cho b·ªánh nh√¢n n√†y!"
        );
      }
    } catch (error) {
      console.error("Error in handleDetail:", error);
      message.error("C√≥ l·ªói x·∫£y ra khi t√¨m h·ªì s∆° ƒëi·ªÅu tr·ªã!");
    }
  };

  const columns = [
    {
      title: "B·ªánh nh√¢n",
      dataIndex: "customerName",
      key: "customerName",
      render: (name, record) => (
        <div style={{ display: "flex", alignItems: "center" }}>
          <Avatar
            size={40}
            icon={<UserOutlined />}
            style={{ marginRight: 12, backgroundColor: "#1890ff" }}
          />
          <div>
            <Text strong>{name}</Text>
            <br />
            <Text type="secondary" style={{ fontSize: "12px" }}>
              {record.customerEmail}
            </Text>
          </div>
        </div>
      ),
    },
    {
      title: "Ng√†y kh√°m",
      dataIndex: "appointmentDate",
      key: "appointmentDate",
      render: (date) => dayjs(date).format("DD/MM/YYYY"),
    },
    {
      title: "Ca kh√°m",
      dataIndex: "shift",
      key: "shift",
      render: (shift) => (
        <Tag color="cyan">
          {shift === "MORNING"
            ? "S√°ng"
            : shift === "AFTERNOON"
            ? "Chi·ªÅu"
            : shift}
        </Tag>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      key: "status",
      render: (record) => getStatusTag(record.status),
    },
    {
      title: "D·ªãch v·ª•",
      key: "serviceName",
      render: (record) => {
        // Hi·ªÉn th·ªã d·ªãch v·ª• theo th·ª© t·ª± ∆∞u ti√™n
        const serviceName = record.purpose || 
                           record.serviceName || 
                           record.treatmentServiceName ||
                           record.treatmentService?.name ||
                           "Ch∆∞a c√≥";
        return (
          <Tag color="purple">
            {serviceName}
          </Tag>
        );
      },
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space size="middle">
          <Button
            type="primary"
            size="small"
            onClick={() => handleDetail(record)}
          >
            Chi Ti·∫øt
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div>
      {/* Filters */}
      <Card
        className="mb-6"
        style={{
          boxShadow: "0 2px 8px rgba(0,0,0,0.08)",
          borderRadius: 12,
          border: "none",
        }}
      >
        <Row gutter={16} align="middle">
          <Col span={8}>
            <Search
              placeholder="T√¨m ki·∫øm t√™n ho·∫∑c ID b·ªánh nh√¢n..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              style={{ width: "100%", borderRadius: 8 }}
              allowClear
            />
          </Col>
          <Col span={6}>
            <Select
              value={statusFilter}
              onChange={setStatusFilter}
              style={{ width: "100%", borderRadius: 8 }}
            >
              <Option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
              <Option value="CONFIRMED">ƒê√£ x√°c nh·∫≠n</Option>
              <Option value="PENDING">Ch·ªù x√°c nh·∫≠n</Option>
              <Option value="REJECTED_CHANGE">T·ª´ ch·ªëi thay ƒë·ªïi</Option>
              <Option value="CANCELLED">ƒê√£ h·ªßy</Option>
            </Select>
          </Col>
          <Col span={10} style={{ textAlign: "right" }}>
            <Text type="secondary">T·ªïng: {filteredData.length} b·ªánh nh√¢n</Text>
          </Col>
        </Row>
      </Card>

      {/* Patient Table */}
      <Card
        title={
          <span style={{ fontWeight: 600, fontSize: 20, color: "#1890ff" }}>
            Danh S√°ch B·ªánh Nh√¢n H√¥m Nay
          </span>
        }
        style={{
          boxShadow: "0 4px 16px rgba(24,144,255,0.08)",
          borderRadius: 16,
          border: "none",
          marginBottom: 24,
        }}
      >
        <Spin spinning={loading}>
          {filteredData.length === 0 ? (
            <div
              style={{
                padding: 32,
                textAlign: "center",
                color: "#888",
                fontSize: 16,
              }}
            >
              <p>Kh√¥ng c√≥ b·ªánh nh√¢n n√†o c·∫ßn ƒëi·ªÅu tr·ªã h√¥m nay.</p>
            </div>
          ) : (
            <Table
              columns={columns}
              dataSource={filteredData}
              rowKey="id"
              pagination={{ pageSize: 10 }}
              scroll={{ x: 1000 }}
              bordered
              style={{ borderRadius: 12, overflow: "hidden" }}
            />
          )}
        </Spin>
      </Card>

      {/* Patient Detail Modal */}
      <Modal
        title="H·ªì S∆° B·ªánh Nh√¢n"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setModalVisible(false)}>
            ƒê√≥ng
          </Button>,
        ]}
        width={800}
        destroyOnHidden
      >
        {selectedPatient && (
          <Descriptions column={2} bordered>
            <Descriptions.Item label="H·ªç t√™n">
              {selectedPatient.customerName}
            </Descriptions.Item>
            <Descriptions.Item label="Email">
              {selectedPatient.customerEmail}
            </Descriptions.Item>
            <Descriptions.Item label="B√°c sƒ©">
              {selectedPatient.doctorName}
            </Descriptions.Item>
            <Descriptions.Item label="D·ªãch v·ª•">
              {selectedPatient.serviceName || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i">
              {getStatusTag(selectedPatient.status)}
            </Descriptions.Item>
            <Descriptions.Item label="Ng√†y kh√°m">
              {dayjs(selectedPatient.appointmentDate).format("DD/MM/YYYY")}
            </Descriptions.Item>
            <Descriptions.Item label="Ca kh√°m">
              {selectedPatient.shift}
            </Descriptions.Item>
            <Descriptions.Item label="M·ª•c ƒë√≠ch">
              {selectedPatient.purpose || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Ghi ch√∫">
              {selectedPatient.notes || "Ch∆∞a c√≥"}
            </Descriptions.Item>
          </Descriptions>
        )}
      </Modal>
    </div>
  );
};

export default PatientList;
